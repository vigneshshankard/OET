"use client"

import { useState, useEffect } from "react"
import { useAuth } from "@/contexts/auth-context"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import RealTimeConversation from "./real-time-conversation"
import FeedbackReport from "./feedback-report"
import { useRouter } from "next/navigation"
import apiClient, { type ScenarioWithDialogues, type PracticeSession } from "@/lib/api-client"
import { SessionData, SessionState, TranscriptEntry, SessionCreateResponse } from "@/types/practice"
import { ConversationMessage } from "@/services/realtime-session"
import { PatientPersona, Scenario } from "@/types"

interface PracticeScenarioProps {
  scenarioId: string
}

export default function PracticeScenario({ scenarioId }: PracticeScenarioProps) {
  const [scenario, setScenario] = useState<ScenarioWithDialogues | null>(null)
  const [sessionState, setSessionState] = useState<'preview' | 'active' | 'feedback'>('preview')
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [practiceSession, setPracticeSession] = useState<PracticeSession | null>(null)
  const [sessionData, setSessionData] = useState<SessionData>({
    sessionId: '',
    startTime: 0,
    transcript: []
  })
  const router = useRouter()

  useEffect(() => {
    fetchScenario()
  }, [scenarioId])

  const fetchScenario = async () => {
    try {
      setIsLoading(true)
      setError(null)
      
      const response = await apiClient.getCompleteScenario(scenarioId)
      setScenario(response.scenario)
      
    } catch (err) {
      console.error('Failed to fetch scenario:', err)
      setError('Failed to load practice scenario. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const startSession = async () => {
    try {
      if (!scenario) return
      
      const { user } = useAuth()
      if (!user) {
        console.error('No authenticated user for practice session')
        setError('Please log in to start a practice session')
        return
      }
      
      const userId = user.id
      
      // Create a practice session via WebRTC server
      const sessionResponse = await fetch('http://localhost:8005/api/sessions/create-room', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          scenarioId: scenario.id,
          userId: userId,
          profession: scenario.profession || 'doctor'
        })
      })

      if (!sessionResponse.ok) {
        throw new Error(`Failed to create session: ${sessionResponse.statusText}`)
      }

      const sessionData = await sessionResponse.json()
      
      // Set session data
      setPracticeSession({
        id: sessionData.sessionId,
        user_id: userId,
        scenario_id: scenario.id,
        status: 'in_progress',
        livekit_room_name: sessionData.roomName,
        livekit_token: sessionData.userToken,
        start_time: new Date().toISOString(),
        metadata: { 
          practice_goals: [`Practice ${scenario.title}`]
        }
      })

      setSessionState('active')
      setSessionData(prev => ({ 
        ...prev, 
        startTime: Date.now(),
        totalPhases: scenario.dialogues?.length || 5,
        websocketUrl: `ws://localhost:8005/sessions/${sessionData.sessionId}/stream`,
        livekitToken: sessionData.userToken,
        livekitUrl: sessionData.serverUrl
      }))
      
    } catch (err) {
      console.error('Failed to start session:', err)
      setError('Failed to start practice session. Please try again.')
    }
  }

  const completeSession = async () => {
    try {
      if (!practiceSession) return

      const duration = Math.floor((Date.now() - sessionData.startTime) / 1000)
      
      console.log('üîÑ Completing session with comprehensive feedback generation...')
      
      // Complete the session via WebRTC server (this now includes AI feedback generation)
      const completeResponse = await fetch(`http://localhost:8005/api/sessions/${practiceSession.id}/complete`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          duration: duration
        })
      })

      if (!completeResponse.ok) {
        throw new Error(`Failed to complete session: ${completeResponse.statusText}`)
      }

      const completionData = await completeResponse.json()
      console.log('‚úÖ Session completion response:', completionData)
      
      // Extract feedback from session completion (generated by WebRTC server + AI services)
      let feedbackData = completionData.session?.feedback
      
      if (!feedbackData) {
        console.warn('No feedback data received, using fallback')
        feedbackData = {
          overallScore: 75,
          detailedScores: {
            pronunciation: 80,
            grammar: 75,
            vocabulary: 70,
            clinicalCommunication: 75,
            empathy: 80,
            patientEducation: 70
          },
          strengths: ['Good listening skills', 'Professional manner'],
          improvements: ['Use more medical terminology', 'Ask more follow-up questions'],
          transcriptAnalysis: {
            totalWords: 0,
            speakingTimePercentage: 60,
            keyPhrasesUsed: [],
            missedOpportunities: []
          }
        }
      }

      console.log('üìä Final feedback data:', feedbackData)
      
      setSessionData((prev: SessionData) => ({
        ...prev,
        duration,
        feedback: feedbackData,
        transcript: sessionData.transcript // Preserve existing transcript
      }))
      
      setSessionState('feedback')
      
    } catch (err) {
      console.error('‚ùå Failed to complete session:', err)
      setError('Failed to complete session. Please try again.')
    }
  }

  const formatPatientPersona = (persona: unknown) => {
    if (typeof persona === 'string') {
      try {
        return JSON.parse(persona)
      } catch {
        return { name: 'Patient', age: 30, background: '', concerns: [] }
      }
    }
    if (typeof persona === 'object' && persona !== null) {
      return persona
    }
    return { name: 'Patient', age: 30, background: '', concerns: [] }
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-100 text-green-800'
      case 'intermediate': return 'bg-yellow-100 text-yellow-800' 
      case 'advanced': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getProfessionColor = (profession: string) => {
    switch (profession) {
      case 'doctor': return 'bg-blue-100 text-blue-800'
      case 'nurse': return 'bg-purple-100 text-purple-800'
      case 'dentist': return 'bg-teal-100 text-teal-800'
      case 'physiotherapist': return 'bg-orange-100 text-orange-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-8" style={{ backgroundColor: '#F8F8F8', minHeight: 'calc(100vh - 140px)' }}>
        <div className="text-center">
          <div className="text-2xl mb-4">üîÑ</div>
          <p>Loading practice scenario...</p>
        </div>
      </div>
    )
  }

  if (error || !scenario) {
    return (
      <div className="container mx-auto px-4 py-8" style={{ backgroundColor: '#F8F8F8', minHeight: 'calc(100vh - 140px)' }}>
        <div className="text-center">
          <div className="text-2xl mb-4 text-red-500">‚ö†Ô∏è</div>
          <p className="text-red-600 mb-4">{error || 'Scenario not found'}</p>
          <Button onClick={() => router.push('/scenarios')}>Back to Scenarios</Button>
        </div>
      </div>
    )
  }

  if (sessionState === 'preview') {
    const patientPersona = formatPatientPersona(scenario.patient_persona) as {
      name?: string
      age?: number
      background?: string
      concerns?: string[]
      personality?: string
      primaryCondition?: string
    }
    
    return (
      <div className="container mx-auto px-4 py-8" style={{ backgroundColor: '#F8F8F8', minHeight: 'calc(100vh - 140px)' }}>
        <div className="max-w-4xl mx-auto space-y-6">
          {/* Back Button */}
          <Button
            variant="outline"
            onClick={() => router.push('/scenarios')}
            className="mb-4"
          >
            ‚Üê Back to Scenarios
          </Button>

          {/* Scenario Header */}
          <Card className="border-0 shadow-sm">
            <CardHeader>
              <div className="flex flex-wrap items-center gap-3 mb-4">
                <Badge className={getProfessionColor(scenario.profession)}>
                  {scenario.profession}
                </Badge>
                <Badge className={getDifficultyColor(scenario.difficulty_level)}>
                  {scenario.difficulty_level}
                </Badge>
                <Badge variant="outline">
                  {scenario.clinical_area}
                </Badge>
              </div>
              <CardTitle className="text-2xl mb-2" style={{ color: '#36454F' }}>
                {scenario.title}
              </CardTitle>
              <p className="text-lg opacity-80" style={{ color: '#36454F' }}>
                {scenario.description}
              </p>
            </CardHeader>
          </Card>

          <div className="grid md:grid-cols-2 gap-6">
            {/* Scenario Details */}
            <Card className="border-0 shadow-sm">
              <CardHeader>
                <CardTitle style={{ color: '#36454F' }}>Scenario Overview</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-medium mb-2" style={{ color: '#36454F' }}>Description</h4>
                  <p className="text-sm opacity-80" style={{ color: '#36454F' }}>
                    {scenario.description}
                  </p>
                </div>
                
                <div>
                  <h4 className="font-medium mb-2" style={{ color: '#36454F' }}>Clinical Area</h4>
                  <p className="text-sm" style={{ color: '#36454F' }}>
                    {scenario.clinical_area}
                  </p>
                </div>
                
                {scenario.dialogues && scenario.dialogues.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-2" style={{ color: '#36454F' }}>Dialogue Steps</h4>
                    <p className="text-sm" style={{ color: '#36454F' }}>
                      {scenario.dialogues.length} conversation turns
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Patient Information */}
            <Card className="border-0 shadow-sm">
              <CardHeader>
                <CardTitle style={{ color: '#36454F' }}>Patient Information</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-medium mb-2" style={{ color: '#36454F' }}>Patient Details</h4>
                  <div className="text-sm space-y-1" style={{ color: '#36454F' }}>
                    <p><strong>Name:</strong> {patientPersona.name || 'Patient'}</p>
                    <p><strong>Age:</strong> {patientPersona.age || 'Not specified'}</p>
                    {patientPersona.background && (
                      <p><strong>Background:</strong> {patientPersona.background}</p>
                    )}
                  </div>
                </div>
                
                {patientPersona.concerns && patientPersona.concerns.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-2" style={{ color: '#36454F' }}>Patient Concerns</h4>
                    <ul className="text-sm space-y-1" style={{ color: '#36454F' }}>
                      {patientPersona.concerns.map((concern: string, index: number) => (
                        <li key={index}>‚Ä¢ {concern}</li>
                      ))}
                    </ul>
                  </div>
                )}
                
                {patientPersona.personality && (
                  <div>
                    <h4 className="font-medium mb-2" style={{ color: '#36454F' }}>Personality</h4>
                    <p className="text-sm" style={{ color: '#36454F' }}>
                      {patientPersona.personality}
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Start Practice Button */}
          <div className="text-center py-6">
            <Button
              onClick={startSession}
              size="lg"
              className="px-8 py-3 text-lg"
              style={{ backgroundColor: '#008080', color: 'white' }}
            >
              üéôÔ∏è Start Practice Session
            </Button>
            <p className="text-sm mt-2 opacity-70" style={{ color: '#36454F' }}>
              This will start a real-time conversation practice with AI feedback
            </p>
          </div>
        </div>
      </div>
    )
  }

  if (sessionState === 'active') {
    return (
      <div style={{ backgroundColor: '#F8F8F8', minHeight: '100vh' }}>
                <RealTimeConversation 
          scenario={{
            id: scenario.id,
            title: scenario.title,
            description: scenario.description,
            profession: scenario.profession,
            difficulty: scenario.difficulty_level,
            duration: `${scenario.duration || 15} minutes`,
            patientProfile: {
              name: (formatPatientPersona(scenario!.patient_persona) as { name?: string }).name || "Patient",
              age: (formatPatientPersona(scenario!.patient_persona) as { age?: number }).age || 30,
              condition: (formatPatientPersona(scenario!.patient_persona) as { primaryCondition?: string }).primaryCondition || "General consultation",
              background: (formatPatientPersona(scenario!.patient_persona) as { background?: string }).background || "Standard patient background"
            }
          }}
          sessionData={{
            sessionId: practiceSession?.id || '',
            websocketUrl: sessionData.websocketUrl || `ws://localhost:8005/sessions/${practiceSession?.id}/stream`,
            livekitToken: sessionData.livekitToken || '',
            livekitUrl: sessionData.livekitUrl || 'ws://localhost:7880',
            roomName: practiceSession?.livekit_room_name || ''
          }}
          onComplete={(transcript) => {
            setSessionData(prev => ({
              ...prev,
              transcript: transcript.map(msg => ({
                text: msg.text,
                timestamp: msg.timestamp.getTime(),
                speaker: msg.speaker === 'user' ? 'user' : 'patient',
                confidence: msg.confidence
              })),
              duration: Math.floor((Date.now() - prev.startTime) / 1000)
            }))
            completeSession()
          }}
        />
      </div>
    )
  }

  if (sessionState === 'feedback') {
    return (
      <div style={{ backgroundColor: '#F8F8F8', minHeight: '100vh' }}>
        <FeedbackReport
          scenario={scenario as unknown as Scenario}
          sessionData={{
            duration: sessionData.duration || 0,
            completedPhases: sessionData.completedPhases || 0,
            totalPhases: sessionData.totalPhases || 5,
            feedback: sessionData.feedback
          }}
          onRetrySession={() => {
            setSessionState('preview')
            setSessionData({
              sessionId: '',
              duration: 0,
              completedPhases: 0,
              totalPhases: 5,
              startTime: 0,
              transcript: []
            })
            setPracticeSession(null)
          }}
          onReturnToDashboard={() => {
            router.push('/dashboard')
          }}
        />
      </div>
    )
  }

  return null
}